// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/codeforcesMS.proto

package codeforcesMSpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CodeforcesMicroserviceClient is the client API for CodeforcesMicroservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodeforcesMicroserviceClient interface {
	GetUserSubmissions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetAllUserSubmissions(ctx context.Context, opts ...grpc.CallOption) (CodeforcesMicroservice_GetAllUserSubmissionsClient, error)
}

type codeforcesMicroserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewCodeforcesMicroserviceClient(cc grpc.ClientConnInterface) CodeforcesMicroserviceClient {
	return &codeforcesMicroserviceClient{cc}
}

func (c *codeforcesMicroserviceClient) GetUserSubmissions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.CodeforcesMicroservice/getUserSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeforcesMicroserviceClient) GetAllUserSubmissions(ctx context.Context, opts ...grpc.CallOption) (CodeforcesMicroservice_GetAllUserSubmissionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CodeforcesMicroservice_ServiceDesc.Streams[0], "/proto.CodeforcesMicroservice/getAllUserSubmissions", opts...)
	if err != nil {
		return nil, err
	}
	x := &codeforcesMicroserviceGetAllUserSubmissionsClient{stream}
	return x, nil
}

type CodeforcesMicroservice_GetAllUserSubmissionsClient interface {
	Send(*Request) error
	Recv() (*OperationStatus, error)
	grpc.ClientStream
}

type codeforcesMicroserviceGetAllUserSubmissionsClient struct {
	grpc.ClientStream
}

func (x *codeforcesMicroserviceGetAllUserSubmissionsClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *codeforcesMicroserviceGetAllUserSubmissionsClient) Recv() (*OperationStatus, error) {
	m := new(OperationStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CodeforcesMicroserviceServer is the server API for CodeforcesMicroservice service.
// All implementations must embed UnimplementedCodeforcesMicroserviceServer
// for forward compatibility
type CodeforcesMicroserviceServer interface {
	GetUserSubmissions(context.Context, *Request) (*Response, error)
	GetAllUserSubmissions(CodeforcesMicroservice_GetAllUserSubmissionsServer) error
	mustEmbedUnimplementedCodeforcesMicroserviceServer()
}

// UnimplementedCodeforcesMicroserviceServer must be embedded to have forward compatible implementations.
type UnimplementedCodeforcesMicroserviceServer struct {
}

func (UnimplementedCodeforcesMicroserviceServer) GetUserSubmissions(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSubmissions not implemented")
}
func (UnimplementedCodeforcesMicroserviceServer) GetAllUserSubmissions(CodeforcesMicroservice_GetAllUserSubmissionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllUserSubmissions not implemented")
}
func (UnimplementedCodeforcesMicroserviceServer) mustEmbedUnimplementedCodeforcesMicroserviceServer() {
}

// UnsafeCodeforcesMicroserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodeforcesMicroserviceServer will
// result in compilation errors.
type UnsafeCodeforcesMicroserviceServer interface {
	mustEmbedUnimplementedCodeforcesMicroserviceServer()
}

func RegisterCodeforcesMicroserviceServer(s grpc.ServiceRegistrar, srv CodeforcesMicroserviceServer) {
	s.RegisterService(&CodeforcesMicroservice_ServiceDesc, srv)
}

func _CodeforcesMicroservice_GetUserSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeforcesMicroserviceServer).GetUserSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CodeforcesMicroservice/getUserSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeforcesMicroserviceServer).GetUserSubmissions(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeforcesMicroservice_GetAllUserSubmissions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CodeforcesMicroserviceServer).GetAllUserSubmissions(&codeforcesMicroserviceGetAllUserSubmissionsServer{stream})
}

type CodeforcesMicroservice_GetAllUserSubmissionsServer interface {
	Send(*OperationStatus) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type codeforcesMicroserviceGetAllUserSubmissionsServer struct {
	grpc.ServerStream
}

func (x *codeforcesMicroserviceGetAllUserSubmissionsServer) Send(m *OperationStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *codeforcesMicroserviceGetAllUserSubmissionsServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CodeforcesMicroservice_ServiceDesc is the grpc.ServiceDesc for CodeforcesMicroservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CodeforcesMicroservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CodeforcesMicroservice",
	HandlerType: (*CodeforcesMicroserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getUserSubmissions",
			Handler:    _CodeforcesMicroservice_GetUserSubmissions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getAllUserSubmissions",
			Handler:       _CodeforcesMicroservice_GetAllUserSubmissions_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/codeforcesMS.proto",
}
